<?php
/**
 * DefaultApiTest
 * PHP version 5
 *
 * @category Class
 * @package  Bskton\Example
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Example API client
 *
 * Provide a client for Example API
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.8
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Please update the test case below to test the endpoint.
 */

namespace Bskton\Example;

use Bskton\Example\Api\DefaultApi;
use Bskton\Example\Api\Model\Comment;
use GuzzleHttp\Client;
use GuzzleHttp\Handler\MockHandler;
use GuzzleHttp\HandlerStack;
use GuzzleHttp\Psr7\Response;

/**
 * DefaultApiTest Class Doc Comment
 *
 * @category Class
 * @package  Bskton\Example
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class DefaultApiTest extends \PHPUnit_Framework_TestCase
{

    /**
     * Setup before running any test cases
     */
    public static function setUpBeforeClass()
    {
    }

    /**
     * Setup before running each test case
     */
    public function setUp()
    {
    }

    /**
     * Clean up after running each test case
     */
    public function tearDown()
    {
    }

    /**
     * Clean up after running all test cases
     */
    public static function tearDownAfterClass()
    {
    }

    /**
     * @dataProvider commentsListProvider
     */
    public function testGetComments($bodyResponse, $comments)
    {
        $mock = new MockHandler([
            new Response(200, [], $bodyResponse),
        ]);

        $handlerStack = HandlerStack::create($mock);
        $client = new Client(['handler' => $handlerStack]);

        $apiInstance = new DefaultApi($client);
        $result = $apiInstance->getComments();
        $this->assertEquals($comments, $result, 'Got comments list');
    }

    /**
     * @expectedException \Bskton\Example\ApiException
     * @expectedExceptionMessage [500] Server error: `GET http://example.com/comments` resulted in a `500 Internal Server Error` response
     */
    public function testGetCommentsException()
    {
        $mock = new MockHandler([
            new Response(500),
        ]);

        $handlerStack = HandlerStack::create($mock);
        $client = new Client(['handler' => $handlerStack]);

        $apiInstance = new DefaultApi($client);
        $apiInstance->getComments();
    }

    /**
     * @dataProvider commentProvider
     */
    public function testPostComment($bodyResponse, $comment)
    {
        $mock = new MockHandler([
            new Response(200, [], $bodyResponse),
        ]);

        $handlerStack = HandlerStack::create($mock);
        $client = new Client(['handler' => $handlerStack]);

        $apiInstance = new DefaultApi($client);
        $result = $apiInstance->postComment($comment);
        $this->assertEquals($comment, $result, 'The comment was posted successfully');
    }

    /**
     * @expectedException \Bskton\Example\ApiException
     * @expectedExceptionMessage [500] Server error: `POST http://example.com/comment` resulted in a `500 Internal Server Error` response
     */
    public function testPostCommentException()
    {
        $mock = new MockHandler([
            new Response(500),
        ]);

        $handlerStack = HandlerStack::create($mock);
        $client = new Client(['handler' => $handlerStack]);

        $apiInstance = new DefaultApi($client);
        $apiInstance->postComment();
    }

    /**
     * @dataProvider commentProvider
     */
    public function testUpdateComment($bodyResponse, $comment)
    {
        $mock = new MockHandler([
            new Response(200, [], $bodyResponse),
        ]);

        $handlerStack = HandlerStack::create($mock);
        $client = new Client(['handler' => $handlerStack]);

        $apiInstance = new DefaultApi($client);
        $result = $apiInstance->updateComment($comment->getId(), $comment);
        $this->assertEquals($comment, $result, 'The comment was updated successfully');
    }

    /**
     * @expectedException \Bskton\Example\ApiException
     * @expectedExceptionMessage [500] Server error: `PATCH http://example.com/comment/1` resulted in a `500 Internal Server Error` response
     */
    public function testUpdateCommentException()
    {
        $mock = new MockHandler([
            new Response(500),
        ]);

        $handlerStack = HandlerStack::create($mock);
        $client = new Client(['handler' => $handlerStack]);

        $apiInstance = new DefaultApi($client);
        $result = $apiInstance->updateComment(1);
    }

    public function commentsListProvider()
    {
        $comments = [];
        for ($i = 1; $i <= 2; $i++) {
            $comments[] = ObjectSerializer::toString(new Comment([
                'id' => $i,
                'name' => 'Comment name '.$i,
                'text' => 'Comment text '.$i,
            ]));
        }

        return [
            ['[]', []],
            ['['.implode($comments, ',').']', $comments],
        ];
    }

    public function commentProvider()
    {
        $comment = new Comment([
            'id' => 1,
            'name' => 'Comment name',
            'text' => 'Comment text',
        ]);

        return [
            [ObjectSerializer::toString($comment), $comment],
        ];
    }
}
